{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Family Information API",
    "description": "This is a family information app created by team d for the CSE341 team project assignment",
    "contact": {
      "name": "CSE 341 Team D",
      "url": "https://github.com/elmambou/cse341-family_information"
    }
  },
  "servers": [
    {
      "url": "https://cse341-family-information-winter-2024.onrender.com/",
      "description": "Render website"
    },
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    }
  ],
  "paths": {
    "/profile": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get Profile",
        "description": "This will return the user profile information for the current authenticated user.",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/individuals/getAllIndividuals": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Get all Individuals",
        "description": "This will list all individuals in the database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "firstName": "Alexander",
                  "middleName": "Danger",
                  "lastName": "Olsen",
                  "birthDate": "2011-07-16T00:00:00.000+00:00",
                  "parents": [
                    "individual1",
                    "individual2"
                  ],
                  "phone": "123-456-7890",
                  "email": "fake@gamil.com",
                  "household": "uniqueId",
                  "headOfHousehold": "false",
                  "picture": "https://fakeimg.pl/600x400?text=Alexander"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Individuals not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/individuals/getIndividualById/{id}": {
      "get": {
        "tags": [
          "Individuals"
        ],
        "summary": "Get a single individual by individual Id",
        "description": "This will return a single individual in the database by individual Id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "firstName": "Alexander",
                  "middleName": "Danger",
                  "lastName": "Olsen",
                  "birthDate": "2011-07-16T00:00:00.000+00:00",
                  "parents": [
                    "individual1",
                    "individual2"
                  ],
                  "phone": "123-456-7890",
                  "email": "fake@gamil.com",
                  "household": "uniqueId",
                  "headOfHousehold": "false",
                  "picture": "https://fakeimg.pl/600x400?text=Alexander"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Individual not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/individuals/": {
      "post": {
        "tags": [
          "Individuals"
        ],
        "summary": "Create an Individual",
        "description": "Create an Individual by providing all required information.",
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "firstName": "Alexander",
                  "middleName": "Danger",
                  "lastName": "Olsen",
                  "birthDate": "2011-07-16T00:00:00.000+00:00",
                  "parents": [
                    "individual1",
                    "individual2"
                  ],
                  "phone": "123-456-7890",
                  "email": "fake@gamil.com",
                  "household": "uniqueId",
                  "headOfHousehold": "false",
                  "picture": "https://fakeimg.pl/600x400?text=Alexander"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Individual not found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "_id": "uniqueId",
                "firstName": "Alexander",
                "middleName": "Danger",
                "lastName": "Olsen",
                "birthDate": "2011-07-16T00:00:00.000+00:00",
                "parents": [
                  "individual1",
                  "individual2"
                ],
                "phone": "123-456-7890",
                "email": "fake@gamil.com",
                "household": "uniqueId",
                "headOfHousehold": "false",
                "picture": "https://fakeimg.pl/600x400?text=Alexander"
              }
            }
          }
        }
      }
    },
    "/individuals/{id}": {
      "put": {
        "tags": [
          "Individuals"
        ],
        "summary": "Update an Individual by Id",
        "description": "Update an existing Individual by providing the individualId and updated fields. All fields are required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "firstName": "Alexander",
                  "middleName": "Danger",
                  "lastName": "Olsen",
                  "birthDate": "2011-07-16T00:00:00.000+00:00",
                  "parents": [
                    "individual1",
                    "individual2"
                  ],
                  "phone": "123-456-7890",
                  "email": "fake@gamil.com",
                  "household": "uniqueId",
                  "headOfHousehold": "false",
                  "picture": "https://fakeimg.pl/600x400?text=Alexander"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Individual not found"
          },
          "412": {
            "description": "Precondition Failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "_id": "uniqueId",
                "firstName": "Alexander",
                "middleName": "Danger",
                "lastName": "Olsen",
                "birthDate": "2011-07-16T00:00:00.000+00:00",
                "parents": [
                  "individual1",
                  "individual2"
                ],
                "phone": "123-456-7890",
                "email": "fake@gamil.com",
                "household": "uniqueId",
                "headOfHousehold": "false",
                "picture": "https://fakeimg.pl/600x400?text=Alexander"
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Individuals"
        ],
        "summary": "Delete an Individual by Id",
        "description": "This will delete a single individual from the database by Id. This action is permanent.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Individual not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/household/getall": {
      "get": {
        "tags": [
          "Households"
        ],
        "summary": "Get all Households",
        "description": "This will list all households in the database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Households not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/household/getbyid/{id}": {
      "get": {
        "tags": [
          "Households"
        ],
        "summary": "Get a single household by household id",
        "description": "This will return a single household in the database by household id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Household not found"
          },
          "422": {
            "description": "Id is invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/household/getbyhoh/{hoh}": {
      "get": {
        "tags": [
          "Households"
        ],
        "summary": "Get a single household by head of household",
        "description": "This will return a single household belonging to the specified head of household",
        "parameters": [
          {
            "name": "hoh",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Household not found"
          },
          "422": {
            "description": "Head of household id is invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/household/getbyaddress/{street}/{city}/{state}/{zip}": {
      "get": {
        "tags": [
          "Households"
        ],
        "summary": "Get a single household by address",
        "description": "This will return a single household located at the specified address.",
        "parameters": [
          {
            "name": "street",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "city",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "zip",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Household not found"
          },
          "422": {
            "description": "Address is invalid"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/household/createhousehold": {
      "post": {
        "tags": [
          "Households"
        ],
        "summary": "Create a Household",
        "description": "Create a Household by providing all required information.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Validation failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "streetAddress": "Test Street",
                "city": "Rexburg",
                "state": "ID",
                "zip": "83440",
                "country": "United States",
                "headOfHousehold": [
                  "65f2162017c8cc6b12754e5e",
                  "65f2166117c8cc6b12754e5f"
                ],
                "residents": [
                  "65f2162017c8cc6b12754e5e",
                  "65f2166117c8cc6b12754e5f",
                  "65f59e49db24e761d695d77e"
                ]
              }
            }
          }
        }
      }
    },
    "/household/updatehousehold/{id}": {
      "put": {
        "tags": [
          "Households"
        ],
        "summary": "Update a Household by its ID",
        "description": "Update an existing household by providing the householdId and the updated information. All fields required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "streetAddress": "123 Real Street",
                  "city": "Salem",
                  "state": "UT",
                  "zip": "84653",
                  "country": "United States",
                  "headOfHousehold": [
                    "individual1",
                    "individual2"
                  ],
                  "residents": [
                    "individual1",
                    "individual2",
                    "individual3",
                    "individial4"
                  ]
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Household not found"
          },
          "412": {
            "description": "Validation failed"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "streetAddress": "123 Jeans Street",
                "city": "Rexburg",
                "state": "ID",
                "zip": "83440",
                "country": "United States",
                "headOfHousehold": [
                  "65f2162017c8cc6b12754e5e",
                  "65f2166117c8cc6b12754e5f"
                ],
                "residents": [
                  "65f2162017c8cc6b12754e5e",
                  "65f2166117c8cc6b12754e5f",
                  "65f59e49db24e761d695d77e"
                ]
              }
            }
          }
        }
      }
    },
    "/household/deletehousehold/{id}": {
      "delete": {
        "tags": [
          "Households"
        ],
        "summary": "Delete a household by its ID",
        "description": "This will delete a single household from the database by Id. This action is permanent.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Household not found"
          },
          "422": {
            "description": "Unprocessable Entity"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/anniversaries/getall": {
      "get": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Get all Anniversaries",
        "description": "This will list all anniversaries in the database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "couple": [
                    "IndividualId1",
                    "IndividualId2"
                  ],
                  "anniversaryDate": "1996-01-14T00:00:00.000Z"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/anniversaries/getformatted": {
      "get": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Get all Anniversaries formatted with names",
        "description": "This will list all anniversaries in the database with names and formatted dates",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "anniversaryId": "uniqueId",
                  "couple": [
                    "John Doe",
                    "Jane Doe"
                  ],
                  "formattedDate": "1996-01-14"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/anniversaries/getbyid/{id}": {
      "get": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Get a single anniversary by anniversary Id",
        "description": "This will return a single anniversary in the database by anniversary Id with individual names and formatted anniversary date",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "anniversaryId": "uniqueId",
                  "couple": [
                    "John Doe",
                    "Jane Doe"
                  ],
                  "anniversaryDate": "1996-01-14"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/anniversaries/getbymonth/{month}": {
      "get": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Get anniversaries by month",
        "description": "This will return a list of anniversaries that occur in the specified month.Month should be entered as an integer.",
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "anniversaryId": "65f67b2343deac10f85b3df6",
                  "couple": [
                    "John Doe",
                    "Jane Doe"
                  ],
                  "formattedDate": "2020-06-30"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/anniversaries/createanniversary": {
      "post": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Create an Anniversary",
        "description": "Create an Anniversary by providing all required information. Individual Ids must be valid and actually exist in the individuals collection. The anniversary date must be formatted as YYYY-MM-DD. All fields are required.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "anniversaryId": "65f67b2343deac10f85b3df6",
                  "couple": [
                    "John Doe",
                    "Jane Doe"
                  ],
                  "formattedDate": "2020-06-30"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "couple": [
                  "individualId1",
                  "individualId2"
                ],
                "anniversaryDate": "2020-06-30"
              }
            }
          }
        }
      }
    },
    "/anniversaries/updateanniversary/{id}": {
      "put": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Update an Anniversary by Id",
        "description": "Update an existing anniversary by providing the anniversaryId and the updated information. Individual Ids must be valid and actually exist in the individuals collection. The anniversary date must be formatted as YYYY-MM-DD. All fields are required.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "anniversaryId": "65f67b2343deac10f85b3df6",
                  "couple": [
                    "John Doe",
                    "Jane Doe"
                  ],
                  "formattedDate": "2020-06-30"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "couple": [
                  "individualId1",
                  "individualId2"
                ],
                "anniversaryDate": "2020-06-30"
              }
            }
          }
        }
      }
    },
    "/anniversaries/deleteanniversary/{id}": {
      "delete": {
        "tags": [
          "Anniversaries"
        ],
        "summary": "Delete an Anniversary by Id",
        "description": "This will delete a single anniversary from the database by Id. This action is permanent.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Anniversary not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/getall": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get all News Stories",
        "description": "This will list all news stories in the database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "newsTitle": "Important Announcement",
                  "newsBody": "I am bringing jello salad to the family reunion!",
                  "status": "public",
                  "postedBy": "individual1",
                  "dateCreated": "2024-03-14T00:00:00.000+00:00",
                  "picture": "https://fakeimg.pl/600x400?text=jello+salad"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/getformatted": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get all News Stories formatted with author names",
        "description": "This will return all the news stories in the database",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "newsId": "uniqueId",
                  "postedBy": "John Doe",
                  "dateCreated": "2024-03-14",
                  "newsTitle": "News Example",
                  "newsBody": "This is an example of a news story.",
                  "status": "public",
                  "picture": "https://fakeimg.pl/600x400?text=example+image"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/{id}": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get Single News Story by newsId",
        "description": "This will return a single news story by news Id for any news item with a public status. If the status of the story is private, it will only be returned if it was created by the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "newsId": "uniqueId",
                  "postedBy": "John Doe",
                  "dateCreated": "2024-03-14",
                  "newsTitle": "News Example",
                  "newsBody": "This is an example of a news story.",
                  "status": "public",
                  "picture": "https://fakeimg.pl/600x400?text=example+image"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/author/{postedBy}": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get News by Author",
        "description": "This will return all public news stories with postedBy matching the provided individualId. If the news stories have a status of private, they will only be returned if the author is the current user.",
        "parameters": [
          {
            "name": "postedBy",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "newsId": "uniqueId",
                  "postedBy": "John Doe",
                  "dateCreated": "2024-03-14",
                  "newsTitle": "News Example",
                  "newsBody": "This is an example of a news story.",
                  "status": "public",
                  "picture": "https://fakeimg.pl/600x400?text=example+image"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/status/{status}": {
      "get": {
        "tags": [
          "News"
        ],
        "summary": "Get News by Status",
        "description": "This will return all news stories with status matching the requested status of public or private. News stories with a status of private are only returned if they were posted by the current user.",
        "parameters": [
          {
            "name": "status",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "newsId": "uniqueId",
                  "postedBy": "John Doe",
                  "dateCreated": "2024-03-14",
                  "newsTitle": "News Example",
                  "newsBody": "This is an example of a news story.",
                  "status": "public",
                  "picture": "https://fakeimg.pl/600x400?text=example+image"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/news/createnews": {
      "post": {
        "tags": [
          "News"
        ],
        "summary": "Create a News Story",
        "description": "Create a news story by providing all required information. News stories can only be created by valid users who are the head of a household. The postedBy Id must match the individualId of the current user.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "newsTitle": "Important Announcement",
                  "newsBody": "I am bringing jello salad to the family reunion!",
                  "status": "public",
                  "postedBy": "individual1",
                  "dateCreated": "2024-03-14T00:00:00.000+00:00",
                  "picture": "https://fakeimg.pl/600x400?text=jello+salad"
                }
              }
            }
          },
          "201": {
            "description": "Created"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "Not Found"
          },
          "412": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "newsTitle": "News Title",
                "newsBody": "News paragraphs",
                "status": "public",
                "postedBy": "IndividualId",
                "dateCreated": "YYYY-MM-DD",
                "picture": "URL of picture"
              }
            }
          }
        }
      }
    },
    "/news/updatenews/{id}": {
      "put": {
        "tags": [
          "News"
        ],
        "summary": "Update a News Story by Id",
        "description": "Update an existing news story by providing all required information. News stories can only be updated by valid users who are the head of a household. The postedBy Id must match the individual Id of the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "newsTitle": "Important Announcement",
                  "newsBody": "I am bringing jello salad to the family reunion!",
                  "status": "public",
                  "postedBy": "individual1",
                  "dateCreated": "2024-03-14T00:00:00.000+00:00",
                  "picture": "https://fakeimg.pl/600x400?text=jello+salad"
                }
              }
            }
          },
          "403": {
            "description": "Access denied"
          },
          "412": {
            "description": "Validation failed"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "example": {
                "newsTitle": "News Title",
                "newsBody": "News paragraphs",
                "status": "public",
                "postedBy": "IndividualId",
                "dateCreated": "YYYY-MM-DD",
                "picture": "URL of picture"
              }
            }
          }
        }
      }
    },
    "/news/deletenews/{id}": {
      "delete": {
        "tags": [
          "News"
        ],
        "summary": "Delete a News Story by Id",
        "description": "This will delete a single news story from the database by Id. News stories can only be deleted by valid users who are the head of a household. The postedBy Id must match the individualId of the current user.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Access denied"
          },
          "404": {
            "description": "News not found"
          },
          "500": {
            "description": "Internal server error"
          }
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "postedBy": {
                    "example": "any"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lookup/parents/{id}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get parents",
        "description": "This will return a list of parents for the individual id provided.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": [
                  "ParentId: uniqueId, Name: John Doe",
                  "ParentId: uniqueId, Name: Jane Doe"
                ]
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/children/{parentId}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get children",
        "description": "This will return a list of individuals with the provided parentId listed in the parents array.",
        "parameters": [
          {
            "name": "parentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "individualId": "uniqueId",
                  "fullName": "John Doe",
                  "birthDate": "2000-01-13"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/grandchildren/{grandparentId}": {
      "get": {
        "tags": [
          "Relationships"
        ],
        "summary": "Get grandchildren",
        "description": "This will return a list of individuals who are grandchildren of the provided grandparentId.",
        "parameters": [
          {
            "name": "grandparentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "individualId": "uniqueId",
                  "fullName": "John Doe",
                  "birthDate": "2000-01-13"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/birthdays": {
      "get": {
        "tags": [
          "Birthdays"
        ],
        "summary": "Get all birthdays",
        "description": "This will return the names of all individuals in the database with their birth date",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "_id": "uniqueId",
                  "firstName": "John",
                  "lastName": "Doe",
                  "birthDate": "2000-01-13T00:00:00.000Z"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/birthdaysFormatted": {
      "get": {
        "tags": [
          "Birthdays"
        ],
        "summary": "Get all birthdays",
        "description": "This will return the full names of all individuals in the database sorted by birth month and date along with their date of birth and the age of the individual as of today",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "fullName": "John Doe",
                  "birthMonth": 1,
                  "birthDay": 13,
                  "birthYear": 2000,
                  "age": 24
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/birthdays/{month}": {
      "get": {
        "tags": [
          "Birthdays"
        ],
        "summary": "Get birthdays by month",
        "description": "This will return the full names of all individuals in the database born in the specified month along with their date of birth and the age of the individual as of today",
        "parameters": [
          {
            "name": "month",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "labelName": "John Doe",
                  "addressLine1": "123 Anywhere Street",
                  "addressLine2": "Minneapolis, MN 43821",
                  "addressLine3": "United States"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    },
    "/lookup/mailingLabels": {
      "get": {
        "tags": [
          "Mailing Labels"
        ],
        "summary": "Get Mailing Labels",
        "description": "This will return the full names of all individuals in the database with their mailing address.",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "example": {
                  "labelName": "John Doe",
                  "addressLine1": "123 Anywhere Street",
                  "addressLine2": "Minneapolis, MN 43821",
                  "addressLine3": "United States"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal server error"
          }
        }
      }
    }
  }
}